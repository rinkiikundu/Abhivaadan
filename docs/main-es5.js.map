{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/auth/auth-interceptor.ts","webpack:///src/app/auth/auth.guard.ts","webpack:///src/app/auth/auth.service.ts","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/login/login.component.html","webpack:///src/app/footer/footer.component.ts","webpack:///src/app/footer/footer.component.html","webpack:///src/app/header/header.component.ts","webpack:///src/app/header/header.component.html","webpack:///src/app/posts/create-post/create-post.component.ts","webpack:///src/app/posts/create-post/create-post.component.html","webpack:///src/app/posts/create-post/mime-type.validator.ts","webpack:///src/app/posts/myposts/myposts.component.ts","webpack:///src/app/posts/myposts/myposts.component.html","webpack:///src/app/posts/post-detail/post-detail.component.ts","webpack:///src/app/posts/post-detail/post-detail.component.html","webpack:///src/app/posts/post-list/post-list.component.ts","webpack:///src/app/posts/post-list/post-list.component.html","webpack:///src/app/profile/create-profile/create-profile.component.ts","webpack:///src/app/profile/create-profile/create-profile.component.html","webpack:///src/app/profile/view-profile/view-profile.component.ts","webpack:///src/app/profile/view-profile/view-profile.component.html","webpack:///src/app/services/post.service.ts","webpack:///src/app/services/profile.service.ts","webpack:///src/app/spinner/spinner.component.ts","webpack:///src/app/spinner/spinner.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","canActivate","AppRoutingModule","forRoot","useHash","imports","AppComponent","authService","profileService","autoAuthUser","autogetProfile","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","declarations","providers","bootstrap","AuthInterceptor","next","authToken","getToken","authRequest","clone","headers","set","handle","AuthGuard","router","route","state","isAuth","getIsAuth","navigate","BACKEND_URL","apiUrl","AuthService","http","isAuthenticated","authStatusListener","err","token","userId","asObservable","email","password","authData","post","subscribe","response","expiresInDuration","expiresIn","setAuthTimer","now","Date","expirationDate","getTime","saveAuthData","clearTimeout","tokenTimer","clearAuthData","authInformation","getAuthData","localStorage","getItem","duration","setTimeout","logout","getProfile","setItem","toISOString","removeItem","providedIn","LoginComponent","isLoginMode","isLoading","error","form","valid","value","signIn","reset","createUser","FooterComponent","HeaderComponent","userIsAuthenticated","profileisSet","getIsProfileSet","authListenerSubs","getAuthStatusListener","getProfileByCreatorId","prof","username","profile","_id","bio","imagePath","creator","unsubscribe","CreatePostComponent","ps","mode","checkProfileCreated","paramMap","has","postId","get","getPostById","createForm","getPost","postData","title","content","imagePreview","setValue","image","validators","required","minLength","asyncValidators","event","file","target","files","patchValue","updateValueAndValidity","reader","FileReader","onload","result","readAsDataURL","postdate","invalid","addPost","updatePost","onSavePost","onImagePicked","mimeType","control","fileReader","frObs","create","observer","addEventListener","arr","Uint8Array","subarray","header","isValid","i","length","toString","invalidMimeType","complete","readAsArrayBuffer","MypostsComponent","posts","postbyUser","isloading","getErrors","getMyPost","postsSub","getPostUpdateListener","getPostUserbyCreatorId","creatorId","push","unique","Set","getPostUserByCreatorId","user","PostDetailComponent","postsService","url","split","getUserId","authStatusSub","console","log","postDate","deletePost","PostListComponent","checkAuth","getUsers","getPosts","sortPostByDate","sort","a","b","getUserProfile","getAllUsers","CreateProfileComponent","uname","getProfileById","checkProfileExist","getProfileByUsername","profileId","addProfile","updateProfile","clearError","checkUsername","ViewProfileComponent","getCurrentUseersPost","pipe","map","data","PostService","postsUpdated","imgpath","FormData","append","responseData","transformedPosts","put","updatedPosts","filter","ProfileService","isProfileSet","updatedProfile","profileData","saveProfileData","SpinnerComponent","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { PostListComponent } from './posts/post-list/post-list.component';\r\nimport { CreatePostComponent } from './posts/create-post/create-post.component';\r\nimport { PostDetailComponent } from './posts/post-detail/post-detail.component';\r\nimport { LoginComponent } from './auth/login/login.component';\r\nimport { AuthGuard } from './auth/auth.guard';\r\nimport { MypostsComponent } from './posts/myposts/myposts.component';\r\nimport { CreateProfileComponent } from './profile/create-profile/create-profile.component';\r\nimport { ViewProfileComponent } from './profile/view-profile/view-profile.component';\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: PostListComponent },\r\n \r\n  { path: 'myposts', component: MypostsComponent ,canActivate: [AuthGuard]},\r\n  { path: 'create', component: CreatePostComponent ,canActivate: [AuthGuard]},\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'myposts/:postId', component: PostDetailComponent ,canActivate: [AuthGuard]},\r\n  { path: 'myposts/edit/:postId', component: CreatePostComponent, canActivate: [AuthGuard] },\r\n  { path: 'profile', component: CreateProfileComponent,canActivate: [AuthGuard] },\r\n  { path: 'public/:profileId', component: ViewProfileComponent },\r\n  { path: 'profile/:profileId', component: ViewProfileComponent,canActivate: [AuthGuard]  },\r\n  { path: 'profile/edit/:profileId', component: CreateProfileComponent,canActivate: [AuthGuard]  },\r\n  { path: 'public/:profileId/posts/:postId', component: PostDetailComponent },\r\n  { path: ':postId', component: PostDetailComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from './auth/auth.service';\r\nimport { ProfileService } from './services/profile.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  constructor(private authService: AuthService,\r\n    private profileService:ProfileService) {}\r\n\r\n  ngOnInit() {\r\n   \r\n    this.authService.autoAuthUser();\r\n\r\n    this.profileService.autogetProfile()\r\n  }\r\n}\r\n","<app-header></app-header>\r\n<router-outlet></router-outlet>\r\n<hr>\r\n<app-footer></app-footer>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport {ReactiveFormsModule} from '@angular/forms'\r\nimport { FormsModule }   from '@angular/forms';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HeaderComponent } from './header/header.component';\r\nimport { PostListComponent } from './posts/post-list/post-list.component';\r\nimport { CreatePostComponent } from './posts/create-post/create-post.component';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\r\nimport { PostService } from './services/post.service';\r\nimport { SpinnerComponent } from './spinner/spinner.component';\r\nimport { PostDetailComponent } from './posts/post-detail/post-detail.component';\r\nimport { LoginComponent } from './auth/login/login.component';\r\nimport { AuthInterceptor } from './auth/auth-interceptor';\r\nimport { AuthService } from './auth/auth.service';\r\nimport { AuthGuard } from './auth/auth.guard';\r\nimport { MypostsComponent } from './posts/myposts/myposts.component';\r\nimport { CreateProfileComponent } from './profile/create-profile/create-profile.component';\r\nimport { ViewProfileComponent } from './profile/view-profile/view-profile.component';\r\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common';\r\nimport { FooterComponent } from './footer/footer.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HeaderComponent,\r\n    PostListComponent,\r\n    CreatePostComponent,\r\n    SpinnerComponent,\r\n    PostDetailComponent,\r\n    LoginComponent,\r\n    MypostsComponent,\r\n    CreateProfileComponent,\r\n    ViewProfileComponent,\r\n    FooterComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    FormsModule\r\n  ],\r\n  providers: [PostService,\r\n    AuthService,AuthGuard,\r\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\r\n    { provide: LocationStrategy, useClass: HashLocationStrategy }\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler\r\n} from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\n\r\nimport { AuthService } from \"./auth.service\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(private authService: AuthService) { }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n\r\n\r\n    const authToken = this.authService.getToken();\r\n    const authRequest = req.clone({\r\n      headers: req.headers.set(\"Authorization\", \"Bearer \" + authToken)\r\n    });\r\n    return next.handle(authRequest);\r\n  }\r\n}\r\n","import {\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  Router\r\n} from \"@angular/router\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { AuthService } from './auth.service';\r\n\r\n\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) { }\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): boolean | Observable<boolean> | Promise<boolean> {\r\n    const isAuth = this.authService.getIsAuth();\r\n    if (!isAuth) {\r\n      this.router.navigate(['/login']);\r\n    }\r\n    return isAuth;\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\nimport { ProfileService } from '../services/profile.service';\r\nimport { AuthData } from './user.model';\r\n\r\nimport {environment} from '../../environments/environment'\r\nconst BACKEND_URL = environment.apiUrl + \"/user/\"\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private isAuthenticated = false;\r\n  private token: string;\r\n  private tokenTimer: any;\r\n  private userId: string;\r\n  private authStatusListener = new Subject<boolean>();\r\n  public err = new BehaviorSubject<any>(null);\r\n  constructor(private http: HttpClient, private router: Router,\r\n    private profileService: ProfileService) { }\r\n\r\n\r\n  getToken() {\r\n    return this.token;\r\n  }\r\n\r\n  getIsAuth() {\r\n    return this.isAuthenticated;\r\n  }\r\n\r\n  getUserId() {\r\n    return this.userId;\r\n  }\r\n  getAuthStatusListener() {\r\n    return this.authStatusListener.asObservable();\r\n  }\r\n\r\n\r\n  signIn(email: string, password: string) {\r\n    const authData: AuthData = { email: email, password: password };\r\n    this.http\r\n      .post<{ token: string; expiresIn: number, userId: string }>(\r\n        BACKEND_URL + \"login\",\r\n        authData\r\n      )\r\n      .subscribe(response => {\r\n\r\n        this.err.next(null)\r\n\r\n        const token = response.token;\r\n        this.token = token;\r\n        if (token) {\r\n          const expiresInDuration = response.expiresIn;\r\n          this.setAuthTimer(expiresInDuration);\r\n          this.isAuthenticated = true;\r\n          this.userId = response.userId;\r\n          this.authStatusListener.next(true);\r\n          const now = new Date();\r\n          const expirationDate = new Date(now.getTime() + expiresInDuration * 1000);\r\n\r\n          this.saveAuthData(token, expirationDate, this.userId);\r\n          this.router.navigate([\"/\"]);\r\n        }\r\n      },\r\n        err => {\r\n          this.err.next(err)\r\n        });\r\n  }\r\n\r\n\r\n  createUser(email: string, password: string) {\r\n    const authData: AuthData = { email: email, password: password };\r\n    this.http\r\n      .post(BACKEND_URL + \"signup\", authData)\r\n      .subscribe(response => {\r\n        this.err.next(null)\r\n        this.router.navigate([\"/\"]);\r\n\r\n      },\r\n        err => {\r\n          this.err.next(err)\r\n        });\r\n  }\r\n\r\n\r\n\r\n  logout() {\r\n    this.token = null;\r\n    this.isAuthenticated = false;\r\n    this.authStatusListener.next(false);\r\n    clearTimeout(this.tokenTimer);\r\n    this.clearAuthData();\r\n    this.router.navigate([\"/\"]);\r\n  }\r\n\r\n\r\n  autoAuthUser() {\r\n    const authInformation = this.getAuthData();\r\n\r\n    if (!authInformation) {\r\n      return;\r\n    }\r\n    const now = new Date();\r\n    const expiresIn = authInformation.expirationDate.getTime() - now.getTime();\r\n\r\n    if (expiresIn > 0) {\r\n      this.token = authInformation.token;\r\n      this.isAuthenticated = true;\r\n      this.userId = authInformation.userId;\r\n      this.setAuthTimer(expiresIn / 1000);\r\n      this.authStatusListener.next(true);\r\n    }\r\n  }\r\n\r\n  private getAuthData() {\r\n    const token = localStorage.getItem(\"token\");\r\n    const expirationDate = localStorage.getItem(\"expiration\");\r\n    const userId = localStorage.getItem(\"userId\");\r\n    if (!token || !expirationDate) {\r\n      return;\r\n    }\r\n    return {\r\n      token: token,\r\n      expirationDate: new Date(expirationDate),\r\n      userId: userId\r\n    }\r\n  }\r\n\r\n\r\n\r\n  private setAuthTimer(duration: number) {\r\n\r\n    this.tokenTimer = setTimeout(() => {\r\n      this.logout();\r\n    }, duration * 1000);\r\n  }\r\n\r\n  private saveAuthData(token: string, expirationDate: Date, userId: string) {\r\n    this.profileService.getProfile()\r\n    localStorage.setItem(\"token\", token);\r\n    localStorage.setItem(\"expiration\", expirationDate.toISOString());\r\n    localStorage.setItem(\"userId\", userId);\r\n  }\r\n\r\n\r\n  private clearAuthData() {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"expiration\");\r\n    localStorage.removeItem(\"userId\");\r\n\r\n    localStorage.removeItem(\"profile\");\r\n    localStorage.removeItem(\"uname\");\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  isLoginMode = true;\r\n  isLoading = false;\r\n  error: any = null;\r\n  constructor(private authService: AuthService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.error = null\r\n    this.authService.err.subscribe(err => {\r\n      this.error = err\r\n      this.isLoading = false\r\n    })\r\n  }\r\n\r\n  onSwitchMode() {\r\n    this.isLoginMode = !this.isLoginMode;\r\n  }\r\n\r\n  onSubmit(form: NgForm) {\r\n    this.isLoading = true;\r\n    if (!form.valid) {\r\n      return;\r\n    }\r\n    const email = form.value.email;\r\n    const password = form.value.password;\r\n\r\n    if (this.isLoginMode) {\r\n      this.authService.signIn(email, password)\r\n\r\n      form.reset()\r\n    }\r\n    else {\r\n      this.authService.createUser(email, password)\r\n\r\n      form.reset()\r\n    }\r\n  }\r\n\r\n}\r\n","\r\n<div class=\"container\">\r\n\r\n\r\n<div class=\"row\">\r\n    <div class=\"col-xs-12 col-md-6 col-md-offset-3\">\r\n        <div class=\"alert alert-danger\" *ngIf=\"error\">\r\n            <p>{{ error.status }} - {{error.error.message}}</p>\r\n        </div>\r\n        <div *ngIf=\"isLoading\" style=\"text-align: center;\" class=\"loading-text\">\r\n           <app-spinner></app-spinner>\r\n        </div>\r\n        <form #authForm=\"ngForm\" (ngSubmit)=\"onSubmit(authForm)\" *ngIf=\"!isLoading\">\r\n            <div class=\"form-group\">\r\n                <label for=\"email\">E-Mail</label>\r\n\r\n                <input type=\"email\" id=\"email\" class=\"form-control\" ngModel name=\"email\" required email />\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"password\">Password</label>\r\n                <input type=\"password\" id=\"password\" class=\"form-control\" ngModel name=\"password\" required minlength=\"6\" />\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n                <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"!authForm.valid\">\r\n                    {{ isLoginMode ? 'Login' : 'Sign Up' }}\r\n                </button> |\r\n                <button class=\"btn btn-primary\" (click)=\"onSwitchMode()\" type=\"button\">\r\n                    Switch to {{ isLoginMode ? 'Sign Up' : 'Login' }}\r\n                </button>\r\n\r\n                <a [routerLink]=\"['/reset-password']\" class=\"btn btn-link\">Forget Password</a>\r\n\r\n            </div>\r\n\r\n            \r\n        </form>\r\n    </div>\r\n</div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.css']\r\n})\r\nexport class FooterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","\r\n\r\n\r\n<h5  class=\"text-center copyright\"> © Copyrights reserved by RINKI NISHI HARIKA JAPPU</h5>","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { Profile } from '../profile/profile.model';\r\nimport { ProfileService } from '../services/profile.service';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css']\r\n})\r\nexport class HeaderComponent implements OnInit, OnDestroy {\r\n  userIsAuthenticated = false;\r\n  private authListenerSubs: Subscription;\r\n  profile: any;\r\n  username: string\r\n  profileisSet = false\r\n  constructor(private authService: AuthService, private profileService: ProfileService,\r\n    private route: ActivatedRoute) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n\r\n    this.profileisSet = this.profileService.getIsProfileSet()\r\n    this.userIsAuthenticated = this.authService.getIsAuth();\r\n    if (this.userIsAuthenticated) {\r\n      this.getProfile()\r\n    }\r\n\r\n    this.authListenerSubs = this.authService\r\n      .getAuthStatusListener()\r\n      .subscribe(isAuthenticated => {\r\n        this.userIsAuthenticated = isAuthenticated;\r\n        if (this.userIsAuthenticated) {\r\n          this.getProfile()\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  onLogout() {\r\n    this.authService.logout();\r\n  }\r\n\r\n  getProfile() {\r\n    this.profileService.getProfileByCreatorId().subscribe(prof => {\r\n      this.profileisSet = true\r\n      this.username = prof.profile.username\r\n      this.profile = {\r\n        id: prof.profile._id,\r\n        username: prof.profile.username,\r\n        bio: prof.profile.bio,\r\n        imagePath: prof.profile.imagePath,\r\n        creator: prof.profile.creator\r\n      };\r\n    },\r\n      err => {\r\n        this.profileisSet = false\r\n        this.username = null\r\n      })\r\n\r\n  }\r\n\r\n\r\n  ngOnDestroy() {\r\n    this.authListenerSubs.unsubscribe();\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n  <nav class=\"navbar navbar-expand-lg navbar-light bg-light py-4\">\r\n    <a class=\"navbar-brand\" href=\"#\">Abhivaadan</a>\r\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo02\"\r\n      aria-controls=\"navbarTogglerDemo02\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n\r\n    <div class=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\r\n      <ul class=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n        <li class=\"nav-item\" routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{ exact: true }\">\r\n          <a class=\"nav-link\" routerLink=\"/\">Home</a>\r\n        </li>\r\n        <li class=\"nav-item\" routerLinkActive=\"active\" *ngIf=\"userIsAuthenticated\">\r\n          <a class=\"nav-link\" routerLink=\"/create\">Create</a>\r\n        </li>\r\n\r\n        <li class=\"nav-item\" routerLinkActive=\"active\" *ngIf=\"userIsAuthenticated && profileisSet\">\r\n          <a class=\"nav-link\" [routerLink]=\"['/profile',username]\">Profile</a>\r\n        </li>\r\n\r\n        <li class=\"nav-item\" routerLinkActive=\"active\" *ngIf=\"userIsAuthenticated && !profileisSet \">\r\n          <a class=\"nav-link\" [routerLink]=\"['/profile']\">Create Profile</a>\r\n        </li>\r\n\r\n        <li class=\"nav-item\" routerLinkActive=\"active\" *ngIf=\"userIsAuthenticated\">\r\n          <a class=\"nav-link\" routerLink=\"/myposts\">MyPosts</a>\r\n        </li>\r\n\r\n        <li class=\"nav-item\" routerLinkActive=\"active\" *ngIf=\"!userIsAuthenticated\">\r\n          <a class=\"nav-link\" routerLink=\"/login\">Auth</a>\r\n        </li>\r\n\r\n        <li class=\"nav-item\" routerLinkActive=\"active\" *ngIf=\"userIsAuthenticated\">\r\n          <a class=\"nav-link\" (click)=\"onLogout()\">Logout</a>\r\n        </li>\r\n      </ul>\r\n\r\n      <ul class=\"nav mymenu mt-5\">\r\n        <li class=\"nav-item\"><a href=\"https://github.com/japangor\" aria-label=\"Github\" class=\"nav-link text-github\"><i\r\n              class=\"fa fa-github\" style=\"font-size: 28px; color: black;\"></i></a></li>\r\n        <li class=\"nav-item\"><a href=\"https://medium.com/@japangor\" aria-label=\"Github\"\r\n            class=\"nav-link text-github\"><i class=\"fa fa-medium\" style=\"font-size: 28px; color: black;\"></i></a></li>\r\n        <li class=\"nav-item\"><a href=\"https://www.instagram.com/japangor/\" aria-label=\"Instagram\"\r\n            class=\"nav-link\"><i class=\"fa fa-instagram\" style=\"font-size: 28px; color: black;\"></i></a></li>\r\n        <li class=\"nav-item\"><a href=\"https://www.linkedin.com/in/japangor/\" aria-label=\"LinkedIn\"\r\n            class=\"nav-link\"><i class=\"fa fa-linkedin\" style=\"font-size: 28px; color: black;\"></i></a></li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n\r\n  <ul class=\"social\">\r\n    <li><a href=\"https://github.com/japank05\"><i class=\"fa fa-github\"></i></a></li>\r\n    <li><a href=\"https://medium.com/@japangor05\"><i class=\"fa fa-medium\"></i></a></li>\r\n    <li><a href=\"https://www.instagram.com/japan_gor05/\"><i class=\"fa fa-instagram\"></i></a></li>\r\n    <li><a href=\"https://www.linkedin.com/in/japan-gor-765868126/\"><i class=\"fa fa-linkedin\"></i></a></li>\r\n  </ul>\r\n</div>\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Post } from '../post.model';\r\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\r\nimport { mimeType } from './mime-type.validator';\r\nimport { PostService } from '../../services/post.service';\r\nimport { ProfileService } from 'src/app/services/profile.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-create-post',\r\n  templateUrl: './create-post.component.html',\r\n  styleUrls: ['./create-post.component.css']\r\n})\r\nexport class CreatePostComponent implements OnInit {\r\n\r\n  postdate: Date\r\n  fetchedDate: Date\r\n  form: FormGroup;\r\n  isLoading: boolean = false\r\n  imagePreview: string\r\n  post: Post;\r\n  private mode = \"create\";\r\n  private postId: string;\r\n  constructor(\r\n    private ps: PostService,\r\n    public route: ActivatedRoute,\r\n    public profileService:ProfileService  ,\r\n    private router: Router,) { }\r\n\r\n  ngOnInit(): void {\r\n    this.checkProfileCreated()\r\n    this.route.paramMap.subscribe((paramMap: ParamMap) => {\r\n      if (paramMap.has(\"postId\")) {\r\n        this.mode = \"edit\";\r\n        this.postId = paramMap.get(\"postId\");\r\n        this.getPostById(this.postId)\r\n      }\r\n      else {\r\n        this.mode = \"create\";\r\n        this.postId = null;\r\n\r\n      }\r\n    })\r\n    this.createForm()\r\n  }\r\n\r\n  getPostById(id) {\r\n    this.isLoading=true\r\n    this.ps.getPost(id).subscribe(postData => {\r\n    \r\n      this.post = {\r\n        id: postData._id,\r\n        title: postData.title,\r\n        content: postData.content,\r\n        imagePath: postData.imagePath,\r\n        creator: postData.creator\r\n      };\r\n      this.imagePreview = postData.imagePath\r\n      this.form.setValue({\r\n        title: this.post.title,\r\n        content: this.post.content,\r\n        image: this.post.imagePath\r\n      });\r\n      this.isLoading = false;\r\n    });\r\n\r\n  }\r\n\r\n  createForm() {\r\n    this.form = new FormGroup({\r\n      title: new FormControl(null, {\r\n        validators: [Validators.required, Validators.minLength(3)]\r\n      }),\r\n      content: new FormControl(null, { validators: [Validators.required] }),\r\n      image: new FormControl(null, {\r\n        validators: [Validators.required],\r\n        asyncValidators: [mimeType]\r\n      })\r\n    });\r\n  }\r\n\r\n  onImagePicked(event: Event) {\r\n    const file = (event.target as HTMLInputElement).files[0];\r\n    this.form.patchValue({ image: file });\r\n    this.form.get(\"image\").updateValueAndValidity();\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      this.imagePreview = reader.result as string;\r\n    };\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  onSavePost() {\r\n    this.postdate = new Date()\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    if (this.mode === \"create\") {\r\n      this.ps.addPost(\r\n        this.form.value.title,\r\n        this.form.value.content,\r\n        this.form.value.image,\r\n        this.postdate\r\n      );\r\n    }\r\n    else {\r\n      this.ps.updatePost(\r\n        this.postId,\r\n        this.form.value.title,\r\n        this.form.value.content,\r\n        this.form.value.image\r\n      );\r\n    }\r\n    this.form.reset();\r\n  }\r\n\r\n  checkProfileCreated(){\r\n    this.profileService.getProfileByCreatorId().subscribe(profile => {\r\n      if(!profile){\r\n        this.router.navigate([\"/profile\"])\r\n      }\r\n    },e=>{\r\n      this.router.navigate([\"/profile\"])\r\n    })\r\n  }\r\n}\r\n\r\n\r\n","<hr>\r\n<div class=\"container\">\r\n  <div *ngIf=\"isLoading\" style=\"text-align: center;\" class=\"loading-text\">\r\n    <app-spinner></app-spinner>\r\n </div>\r\n  <form [formGroup]=\"form\" (submit)=\"onSavePost()\">\r\n    <div class=\"form-group\">\r\n      <input\r\n        type=\"text\"\r\n        formControlName=\"title\"\r\n        class=\"form-control\"\r\n        placeholder=\"Post Title\"\r\n      />\r\n      <span\r\n        class=\"text-danger\"\r\n        *ngIf=\"form.get('title').invalid && form.get('title').touched\"\r\n        >Please enter a post title.</span\r\n      >\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn btn-outline-success\"\r\n        (click)=\"filePicker.click()\"\r\n      >\r\n        Pick Image\r\n      </button>\r\n      <input\r\n        type=\"file\"\r\n        class=\"form-control\"\r\n        #filePicker\r\n        (change)=\"onImagePicked($event)\"\r\n      />\r\n\r\n      <div\r\n        class=\"image-preview\"\r\n        *ngIf=\"imagePreview !== '' && imagePreview && form.get('image').valid\"\r\n      >\r\n        <img [src]=\"imagePreview\" [alt]=\"form.value.title\" />\r\n      </div>\r\n      <span\r\n        class=\"text-danger\"\r\n        *ngIf=\"form.get('image').invalid && form.dirty && form.touched\"\r\n        >Please Choose a valid image.</span\r\n      >\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <textarea\r\n        class=\"form-control\"\r\n        rows=\"4\"\r\n        formControlName=\"content\"\r\n        placeholder=\"Post Content\"\r\n      ></textarea>\r\n      <span\r\n        class=\"text-danger\"\r\n        *ngIf=\"form.get('content').invalid && form.get('content').touched\"\r\n        >Please enter a post title.</span\r\n      >\r\n    </div>\r\n    <button class=\"btn btn-primary\" [disabled]=\"form.invalid\" type=\"submit\">\r\n      Save Post\r\n    </button>\r\n  </form>\r\n</div>\r\n","import { AbstractControl } from \"@angular/forms\";\r\nimport { Observable, Observer, of } from \"rxjs\";\r\n\r\nexport const mimeType = (\r\n  control: AbstractControl\r\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\r\n  if (typeof(control.value) === 'string') {\r\n    return of(null);\r\n  }\r\n  const file = control.value as File;\r\n  const fileReader = new FileReader();\r\n  const frObs = Observable.create(\r\n    (observer: Observer<{ [key: string]: any }>) => {\r\n      fileReader.addEventListener(\"loadend\", () => {\r\n        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\r\n        let header = \"\";\r\n        let isValid = false;\r\n        for (let i = 0; i < arr.length; i++) {\r\n          header += arr[i].toString(16);\r\n        }\r\n        switch (header) {\r\n          case \"89504e47\":\r\n            isValid = true;\r\n            break;\r\n          case \"ffd8ffe0\":\r\n          case \"ffd8ffe1\":\r\n          case \"ffd8ffe2\":\r\n          case \"ffd8ffe3\":\r\n          case \"ffd8ffe8\":\r\n            isValid = true;\r\n            break;\r\n          default:\r\n            isValid = false; // Or you can use the blob.type as fallback\r\n            break;\r\n        }\r\n        if (isValid) {\r\n          observer.next(null);\r\n        } else {\r\n          observer.next({ invalidMimeType: true });\r\n        }\r\n        observer.complete();\r\n      });\r\n      fileReader.readAsArrayBuffer(file);\r\n    }\r\n  );\r\n  return frObs;\r\n};\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { PostService } from '../../services/post.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { Post } from '../post.model';\r\nimport { AuthService } from '../../auth/auth.service';\r\nimport { ProfileService } from '../../services/profile.service';\r\nimport { Profile } from '../../profile/profile.model';\r\n\r\n@Component({\r\n  selector: 'app-myposts',\r\n  templateUrl: './myposts.component.html',\r\n  styleUrls: ['./myposts.component.css']\r\n})\r\nexport class MypostsComponent implements OnInit, OnDestroy {\r\n  posts: Post[] = [];\r\n  postbyUser: Profile[] = []\r\n  isloading = false;\r\n  error: any\r\n  userId: string\r\n  private postsSub: Subscription;\r\n  constructor(private ps: PostService, private authService: AuthService,\r\n    private profileService: ProfileService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getErrors()\r\n    this.isloading = true\r\n    this.getMyPost()\r\n    this.postsSub = this.ps.getPostUpdateListener()\r\n      .subscribe((posts: Post[]) => {\r\n\r\n        this.getPostUserbyCreatorId(posts)\r\n        this.isloading = false;\r\n        this.posts = posts;\r\n      }, e => {\r\n        this.isloading = false;\r\n        this.error = e\r\n      });\r\n  }\r\n\r\n  getPostUserbyCreatorId(post: Post[]) {\r\n    let creatorId = []\r\n    for (let i in post) {\r\n      creatorId.push(post[i].creator)\r\n\r\n    }\r\n\r\n    let unique = [...new Set(creatorId)];\r\n    for (let i in unique) {\r\n      this.profileService.getPostUserByCreatorId(unique[i])\r\n        .subscribe(user => {\r\n          this.postbyUser.push(user.profile)\r\n        })\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  getErrors() {\r\n    this.error = null\r\n    this.ps.err.subscribe(err => {\r\n      this.error = err\r\n      this.isloading = false\r\n    })\r\n  }\r\n\r\n  getMyPost() {\r\n    this.ps.getMyPost(this.userId)\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.postsSub.unsubscribe();\r\n  }\r\n}","<div class=\"site-section bg-light\">\r\n  <div class=\"container\">\r\n    <div class=\"row mb-5\">\r\n      <div class=\"col-md-12 text-center\">\r\n        <h2 class=\"font-weight-bold text-black\">My Posts</h2>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"alert alert-danger\" *ngIf=\"error && error.error.message\" >\r\n        <p>{{ error.status }} - {{error.error.message}}</p>\r\n    </div>\r\n\r\n    <div class=\"alert alert-danger\" *ngIf=\"error && !error.error.message\" >\r\n      <p>{{ error.status }} - {{error.statusText}}</p>\r\n  </div>\r\n    <div *ngIf=\"isloading\" style=\"text-align: center;\" class=\"loading-text\">\r\n       <app-spinner></app-spinner>\r\n    </div>\r\n    <ng-container *ngIf=\"posts.length>0\">\r\n\r\n    \r\n      <div class=\"col-md-6\" *ngFor = \"let post of posts\">\r\n        <div class=\"d-block podcast-entry bg-white mb-5 aos-init aos-animate\" data-aos = \"fade-up\">\r\n          <div class=\"image w-100\"  [style.backgroundImage]=\"'url('+ post.imagePath +') ' \"></div>\r\n          <div class=\"text w-100\">\r\n            <h3 class=\"\">\r\n              <a [routerLink]=\"[post.id]\">{{post.title}}</a>\r\n            </h3>\r\n\r\n            <div class=\"text-white mb-3\">\r\n              <span class=\"text-black-opacity-05\" *ngFor=\"let  user of postbyUser\">\r\n                <small *ngIf=\"user.creator === post.creator\">\r\n                  <a [routerLink]=\"['../public', user.username]\">by {{user.username}}</a>\r\n                  <span class=\"sep\"> /\r\n                  </span>{{post.postDate | date:'short'}}</small>\r\n              </span>\r\n            </div>\r\n            <p class=\"mb-4\">{{post.content}} </p>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </ng-container>\r\n\r\n    <div *ngIf=\"posts.length==0 && !isloading\" style=\"text-align: center;\" class=\"loading-text\">\r\n      <h2>No Posts Found</h2>\r\n   </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { ProfileService } from 'src/app/services/profile.service';\r\n\r\nimport { AuthService } from '../../auth/auth.service';\r\nimport { PostService } from '../../services/post.service';\r\nimport { Post } from '../post.model';\r\n\r\n@Component({\r\n  selector: 'app-post-detail',\r\n  templateUrl: './post-detail.component.html',\r\n  styleUrls: ['./post-detail.component.css']\r\n})\r\nexport class PostDetailComponent implements OnInit, OnDestroy {\r\n  isAuth\r\n  isloading = false;\r\n  url: string\r\n  error: any\r\n  postId: string;\r\n  post: Post;\r\n  userId: String;\r\n  userIsAuthenticated: boolean\r\n  private authStatusSub: Subscription;\r\n  profile: any\r\n\r\n  constructor(\r\n    public postsService: PostService,\r\n    public route: ActivatedRoute,\r\n    public router: Router,\r\n    private authService: AuthService,\r\n    public profileService:ProfileService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.url = this.router.url.split(\"/\")[1]\r\n    \r\n    this.authData()\r\n    this.getErrors()\r\n\r\n    this.route.paramMap.subscribe((paramMap: ParamMap) => {\r\n\r\n      if (paramMap.has(\"postId\")) {\r\n        this.postId = paramMap.get(\"postId\");\r\n        this.getPostById(this.postId)\r\n      }\r\n    })\r\n  }\r\n\r\n  authData() {\r\n    this.isAuth = this.authService.getIsAuth()\r\n    this.userId = this.authService.getUserId();\r\n    this.authStatusSub = this.authService\r\n      .getAuthStatusListener()\r\n      .subscribe(isAuthenticated => {\r\n        this.userIsAuthenticated = isAuthenticated;\r\n        this.userId = this.authService.getUserId();\r\n      });\r\n  }\r\n  getErrors() {\r\n    this.error = null\r\n    this.postsService.err.subscribe(err => {\r\n      this.error = err\r\n      this.isloading = false\r\n\r\n    })\r\n\r\n  }\r\n\r\n  getPostById(id) {\r\n    this.isloading = true\r\n    this.postsService.getPost(this.postId).subscribe(postData => {\r\n      console.log(postData)\r\n      this.post = {\r\n        id: postData._id,\r\n        title: postData.title,\r\n        content: postData.content,\r\n        imagePath: postData.imagePath,\r\n        creator: postData.creator,\r\n        postDate:postData.postDate\r\n      };\r\n      this.getPostUserByCreatorId(postData.creator) \r\n\r\n      // this.compareIds(this.userId,this.post.creator)\r\n      this.isloading = false\r\n    })\r\n    e => {\r\n      this.isloading = false\r\n      this.error = e\r\n    }\r\n  }\r\n\r\n\r\n\r\n  OnDelete(postId: string) {\r\n    this.postsService.deletePost(postId);\r\n  }\r\n\r\n\r\n  getPostUserByCreatorId(id) {\r\n    this.profileService.getPostUserByCreatorId(id).subscribe(profile => {\r\n      if (profile.profile) {\r\n        this.profile= profile.profile\r\n      }else{\r\n      }\r\n    },e=>{\r\n      this.isloading = false\r\n    })\r\n\r\n  }\r\n  ngOnDestroy() {\r\n\r\n    this.authStatusSub.unsubscribe();\r\n  }\r\n}\r\n","  <div class=\"container\">\r\n    <div class=\"alert alert-danger\" *ngIf=\"error\">\r\n      <p>{{ error.status }} - {{error.error.message}}</p>\r\n  </div>\r\n  <div *ngIf=\"isloading\" style=\"text-align: center;\" class=\"loading-text\">\r\n    <app-spinner></app-spinner>\r\n  </div>\r\n    <div class=\"row\">\r\n\r\n      \r\n\r\n      <div class=\"col-md-3 col-xs-12\" *ngIf=\"isAuth && url =='myposts' \">\r\n        <div class=\"list-group\">\r\n          <a [routerLink]=\"['../edit',postId]\" class=\"list-group-item list-group-item-action\">\r\n            Edit Post\r\n          </a>\r\n          <a data-toggle=\"modal\" data-target=\"#exampleModal\" class=\"list-group-item list-group-item-action\">Delete Post</a>\r\n\r\n        </div>\r\n\r\n\r\n        <!-- Modal -->\r\n        <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\"\r\n          aria-hidden=\"true\">\r\n          <div class=\"modal-dialog\" role=\"document\">\r\n            <div class=\"modal-content\">\r\n              <div class=\"modal-header\">\r\n                <h5 class=\"modal-title\" id=\"exampleModalLabel\">Delete Confirmation Box</h5>\r\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                  <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n              </div>\r\n              <div class=\"modal-body\">\r\n                Please click on Ok button to Delete the post permanently\r\n              </div>\r\n              <div class=\"modal-footer\">\r\n                <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Cancel</button>\r\n                <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" (click)=\"OnDelete(postId)\">Confirm</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n      </div>\r\n\r\n      <div class=\"col-md-9 main\" *ngIf=\"post\">\r\n        <div class=\"card-body\">\r\n          <h1>{{post.title}}</h1>\r\n          <div class=\"text-white mb-3\">\r\n            <span class=\"text-black-opacity-05\" >\r\n              <small *ngIf=\"profile\">\r\n                <a [routerLink]=\"['../public', profile.username]\">by {{profile.username}}</a>\r\n                \r\n                <span class=\"sep\"> /\r\n                </span>{{post.postDate | date:'short'}}</small>\r\n            </span>\r\n          </div>\r\n\r\n          <div class=\"img\">\r\n            <img src={{post.imagePath}} alt=\"\" class=\"img-responsive center\">\r\n          </div>\r\n          <hr>\r\n\r\n          <p>{{post.content}}</p>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n\r\n  </div>","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { PostService } from '../../services/post.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { Post } from '../post.model';\r\nimport { AuthService } from '../../auth/auth.service';\r\nimport { ProfileService } from '../../services/profile.service';\r\nimport { Profile } from '../../profile/profile.model';\r\n\r\n@Component({\r\n  selector: 'app-post-list',\r\n  templateUrl: './post-list.component.html',\r\n  styleUrls: ['./post-list.component.css']\r\n})\r\nexport class PostListComponent implements OnInit, OnDestroy {\r\n  userIsAuthenticated = false;\r\n  private authListenerSubs: Subscription;\r\n\r\n  posts: Post[] = [];\r\n  user: Profile[] = []\r\n  postbyUser: Profile[] = []\r\n  isloading = false;\r\n  error: any\r\n  userId: string\r\n  private postsSub: Subscription;\r\n  constructor(private ps: PostService,\r\n    private authService: AuthService,\r\n    private profileService: ProfileService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.checkAuth()\r\n    this.getErrors()\r\n    this.getUsers()\r\n    this.isloading = true\r\n    this.userId = this.authService.getUserId();\r\n    this.ps.getPosts()\r\n\r\n    this.postsSub = this.ps.getPostUpdateListener()\r\n      .subscribe((posts: Post[]) => {\r\n\r\n\r\n        this.isloading = false;\r\n        this.posts = posts;\r\n        this.sortPostByDate(posts)\r\n        this.getPostUserbyCreatorId(this.posts)\r\n        console.log(\"posts is\", this.posts)\r\n      }, e => {\r\n        this.isloading = false;\r\n        this.error = e\r\n      });\r\n  }\r\n\r\n  sortPostByDate(post){\r\n    post.sort((a, b) => new Date(b.postDate).getTime() - new Date(a.postDate).getTime());\r\n\r\n  }\r\n  getErrors() {\r\n    this.error = null\r\n    this.ps.err.subscribe(err => {\r\n      this.error = err\r\n      this.isloading = false\r\n    })\r\n  }\r\n\r\n  checkAuth() {\r\n    this.userIsAuthenticated = this.authService.getIsAuth();\r\n\r\n    this.authListenerSubs = this.authService\r\n      .getAuthStatusListener()\r\n      .subscribe(isAuthenticated => {\r\n        \r\n        this.userIsAuthenticated = isAuthenticated;\r\n        this.getUserProfile()\r\n      });\r\n  }\r\n\r\n  getUserProfile(){\r\n\r\n  }\r\n\r\n  getUsers() {\r\n    this.profileService.getAllUsers().subscribe(user => {\r\n      this.user = user.profile\r\n    })\r\n  }\r\n\r\n  getPostUserbyCreatorId(post: Post[]) {\r\n    let creatorId = []\r\n    for (let i in post) {\r\n      creatorId.push(post[i].creator)\r\n\r\n    }\r\n\r\n    let unique = [...new Set(creatorId)];\r\n    for (let i in unique) {\r\n      this.profileService.getPostUserByCreatorId(unique[i])\r\n        .subscribe(user => {\r\n          this.postbyUser.push(user.profile)\r\n\r\n        })\r\n    }\r\n\r\n  }\r\n\r\n\r\n  ngOnDestroy() {\r\n    this.postsSub.unsubscribe();\r\n    this.authListenerSubs.unsubscribe();\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n","<div class=\"container hero\" *ngIf = \"!userIsAuthenticated\">\r\n  <div class=\"row align-items-center text-center text-md-left\">\r\n    <div class=\"col-lg-4\">\r\n      <h1 class=\"mb-3 display-3\">Tell Your Story to the World</h1>\r\n      <p>Join with us! Login or Register. Write your story and share !!</p>\r\n    </div>\r\n\r\n    <div class=\"col-lg-8\">\r\n      <img src=\"assets/asset-1.png\" alt=\"Image\" class=\"img-fluid\">\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<hr>\r\n<div class=\"site-section\">\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div *ngIf=\"isloading\" style=\"text-align: center;\" class=\"loading-text\">\r\n        <app-spinner></app-spinner>\r\n     </div>\r\n      <div class=\"col-lg-8\">\r\n        <div class=\"d-block d-md-flex podcast-entry bg-white mb-5 aos-init aos-animate\"\r\n          *ngFor=\"let post of posts;let i=index\" data-aos=\"fade-up\">\r\n          <div class=\"image\" [style.backgroundImage]=\"'url('+ post.imagePath +') ' \"></div>\r\n          <div class=\"text\">\r\n            <h3 class=\"font-weight-dark\">\r\n              <a [routerLink]=\"[post.id]\"> {{ post.title }}</a>\r\n            </h3>\r\n            <div class=\"text-white mb-3\">\r\n              <span class=\"text-black-opacity-05\" *ngFor=\"let  user of postbyUser\">\r\n                <small *ngIf=\"user.creator === post.creator\">\r\n                  <a [routerLink]=\"['public', user.username]\">by {{user.username}}</a><span class=\"sep\"> /\r\n                  </span>{{post.postDate | date:'short'}}</small>\r\n              </span>\r\n            </div>\r\n\r\n            <div class=\"desc\">\r\n              <p>{{post.content |slice:0: 170 }}\r\n                <a [routerLink]=\"[post.id]\">{{post.content.length > 170 ? '...Read More' : ''}}</a></p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-lg-4\">\r\n        <div class=\"featured-user  mb-5 mb-lg-0\">\r\n          <h3 class=\"mb-4\">Popular Authors</h3>\r\n          <ul class=\"list-unstyled\">\r\n            <li *ngFor=\"let usr of user\">\r\n              <a [routerLink]=\"['public',usr.username]\" class=\"d-flex align-items-center\">\r\n                <img src={{usr.imagePath}} class=\"img-fluid mr-2\">\r\n                <div class=\"podcaster\">\r\n                  <span class=\"d-block\">{{usr.username}}</span>\r\n                  <span class=\"small\">{{usr.bio |slice:0: 70}}</span>\r\n                </div>\r\n              </a>\r\n            </li>\r\n\r\n\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\r\nimport { mimeType } from '../../posts/create-post/mime-type.validator';\r\nimport { ProfileService } from '../../services/profile.service';\r\nimport { Profile } from '../profile.model';\r\n\r\n@Component({\r\n  selector: 'app-create-profile',\r\n  templateUrl: './create-profile.component.html',\r\n  styleUrls: ['./create-profile.component.css']\r\n})\r\nexport class CreateProfileComponent implements OnInit {\r\n  form: FormGroup;\r\n  isLoading: boolean = true\r\n  imagePreview: string\r\n  post: any;\r\n  uname: string\r\n  error: string\r\n  private mode = \"create\";\r\n  private profileId: string;\r\n  constructor(private profileService: ProfileService\r\n    , private router: Router,\r\n    public route: ActivatedRoute) { }\r\n\r\n  ngOnInit(): void {\r\n    this.route.paramMap.subscribe((paramMap: ParamMap) => {\r\n      if (paramMap.has(\"profileId\")) {\r\n        this.mode = \"edit\";\r\n        this.uname = paramMap.get(\"profileId\");\r\n        this.getProfileById(this.uname)\r\n      }\r\n      else {\r\n        this.mode = \"create\";\r\n        this.uname = null;\r\n\r\n      }\r\n    })\r\n    this.createForm()\r\n    this.checkProfileExist()\r\n  }\r\n\r\n  getProfileById(id) {\r\n    this.isLoading = true\r\n    this.profileService.getProfileByUsername(id).subscribe(profile => {\r\n      this.isLoading = false\r\n      this.post = {\r\n        id: profile.profile._id,\r\n        username: profile.profile.username,\r\n        bio: profile.profile.bio,\r\n        imagePath: profile.profile.imagePath,\r\n        creator: profile.profile.creator\r\n      };\r\n      this.profileId = profile.profile._id\r\n      this.imagePreview = profile.profile.imagePath\r\n      this.form.setValue({\r\n        username: this.post.username,\r\n        bio: this.post.bio,\r\n        image: this.post.imagePath\r\n      });\r\n\r\n    })\r\n  }\r\n\r\n  checkProfileExist() {\r\n    this.isLoading = true\r\n    this.profileService.getProfileByCreatorId().subscribe(profile => {\r\n      console.log(profile)\r\n      if (profile) {\r\n        let uname = profile.profile.username\r\n        if (this.mode == \"create\")\r\n          this.router.navigate(['/profile', uname])\r\n      }else{\r\n        this.isLoading = false\r\n      }\r\n    },e=>{\r\n      this.isLoading = false\r\n    })\r\n\r\n  }\r\n  createForm() {\r\n    this.form = new FormGroup({\r\n      username: new FormControl(null, {\r\n        validators: [Validators.required, Validators.minLength(3)]\r\n      }),\r\n      bio: new FormControl(null, { validators: [Validators.required] }),\r\n      image: new FormControl(null, {\r\n        validators: [Validators.required],\r\n        asyncValidators: [mimeType]\r\n      })\r\n    });\r\n  }\r\n\r\n  onImagePicked(event: Event) {\r\n    const file = (event.target as HTMLInputElement).files[0];\r\n    this.form.patchValue({ image: file });\r\n    this.form.get(\"image\").updateValueAndValidity();\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      this.imagePreview = reader.result as string;\r\n    };\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  onSavePost() {\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n\r\n    if (this.mode === \"create\") {\r\n      this.profileService.addProfile(\r\n        this.form.value.username,\r\n        this.form.value.bio,\r\n        this.form.value.image\r\n      );\r\n    }\r\n    else {\r\n      this.profileService.updateProfile(\r\n        this.profileId,\r\n        this.form.value.username,\r\n        this.form.value.bio,\r\n        this.form.value.image\r\n      );\r\n    }\r\n    this.form.reset();\r\n  }\r\n\r\n\r\n  clearError() {\r\n    this.error = ''\r\n  }\r\n\r\n  checkUsername(uname) {\r\n    this.profileService.getProfileByUsername(uname).subscribe(profile => {\r\n      if (profile && uname !== this.uname) {\r\n        this.error = \"Username is already taken!\"\r\n      }\r\n\r\n    })\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <div *ngIf=\"isLoading\" style=\"text-align: center;\" class=\"loading-text\">\r\n    <app-spinner></app-spinner>\r\n </div>\r\n    <form [formGroup]=\"form\" (submit)=\"onSavePost()\">\r\n      <div class=\"form-group\">\r\n        <input\r\n          type=\"text\"\r\n          formControlName=\"username\"\r\n          class=\"form-control\"\r\n          placeholder=\"Username\"\r\n          (focus)=\"clearError()\" (blur)=\"checkUsername($event.target.value)\"\r\n        />\r\n        <ng-container *ngIf=\"error\">\r\n          <span class=\"text-danger\" *ngIf=\"form.get('username')\r\n           && (form.get('username').dirty || form.get('username').touched)\">\r\n              {{error}}</span>\r\n      </ng-container>\r\n        <span\r\n          class=\"text-danger\"\r\n          *ngIf=\"form.get('username').invalid && form.get('username').touched\"\r\n          >Please enter a post title.</span\r\n        >\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-outline-success\"\r\n          (click)=\"filePicker.click()\"\r\n        >\r\n          Pick Image\r\n        </button>\r\n        <input\r\n          type=\"file\"\r\n          class=\"form-control\"\r\n          #filePicker\r\n          (change)=\"onImagePicked($event)\"\r\n        />\r\n  \r\n        <div\r\n          class=\"image-preview\"\r\n          *ngIf=\"imagePreview !== '' && imagePreview && form.get('image').valid\"\r\n        >\r\n          <img [src]=\"imagePreview\" [alt]=\"form.value.title\" />\r\n        </div>\r\n        <span\r\n          class=\"text-danger\"\r\n          *ngIf=\"form.get('image').invalid && form.dirty && form.touched\"\r\n          >Please Choose a valid image.</span\r\n        >\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <textarea\r\n          class=\"form-control\"\r\n          rows=\"4\"\r\n          formControlName=\"bio\"\r\n          placeholder=\"Your short Bio\"\r\n        ></textarea>\r\n        <span\r\n          class=\"text-danger\"\r\n          *ngIf=\"form.get('bio').invalid && form.get('bio').touched\"\r\n          >Please enter a Bio</span\r\n        >\r\n      </div>\r\n      <button class=\"btn btn-primary\" [disabled]=\"form.invalid || error\" type=\"submit\">\r\n        Save Profile\r\n      </button>\r\n    </form>\r\n  </div>\r\n  ","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\r\nimport { map } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/auth.service';\r\nimport { Post } from '../../posts/post.model';\r\nimport { ProfileService } from '../../services/profile.service';\r\nimport { Profile } from '../profile.model';\r\n\r\n@Component({\r\n  selector: 'app-view-profile',\r\n  templateUrl: './view-profile.component.html',\r\n  styleUrls: ['./view-profile.component.css']\r\n})\r\nexport class ViewProfileComponent implements OnInit {\r\n  profileId: string\r\n  isloading: boolean = false\r\n  profile: Profile\r\n  posts: Post[] = []\r\n  url\r\n  userId: string\r\n  constructor(private profileService: ProfileService,\r\n    private authService: AuthService,\r\n    public route: ActivatedRoute,\r\n    public router: Router,) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userId = this.authService.getUserId()\r\n\r\n    this.url = this.router.url.split(\"/\")[1]\r\n\r\n    this.route.paramMap.subscribe((paramMap: ParamMap) => {\r\n      if (paramMap.has(\"profileId\")) {\r\n        this.profileId = paramMap.get(\"profileId\");\r\n        this.getProfileByUsername(this.profileId)\r\n        this.getCurrentUseersPost(this.profileId)\r\n      }\r\n      else{\r\n        this.router.navigate[(\"/\")]\r\n      }\r\n    })\r\n  }\r\n\r\n  getProfileByUsername(uname) {\r\n    this.isloading = true\r\n    this.profileService.getProfileByUsername(uname)\r\n      .subscribe(profile => {\r\n        this.profile = profile.profile\r\n        this.isloading = false\r\n      })\r\n  }\r\n\r\n  getCurrentUseersPost(uname) {\r\n    this.isloading = true\r\n    this.profileService.getMyPost(uname).pipe(\r\n      map(postData => {\r\n        return postData.post.map(post => {\r\n          return {\r\n            title: post.title,\r\n            content: post.content,\r\n            id: post._id,\r\n            imagePath: post.imagePath,\r\n            creator: post.creator,\r\n            postDate: post.postDate\r\n          };\r\n        });\r\n      })\r\n    ).subscribe(data => {\r\n      this.isloading = false\r\n      this.posts = data\r\n    })\r\n  }\r\n\r\n}\r\n","<hr>\r\n<div class=\"container py-5\">\r\n    <div *ngIf=\"isloading\" style=\"text-align: center;\" class=\"loading-text\">\r\n        <app-spinner></app-spinner>\r\n     </div>\r\n    <div class=\"row profile\" *ngIf = \"profile\">\r\n        <div  class=\"col-md-8 col-xs-12  order-2 order-lg-1\">\r\n            <h2 class=\"text-black font-weight-light mb-4\">{{profile.username}}</h2>\r\n            <a *ngIf=\"userId===profile.creator && url =='profile'\" [routerLink]=\"['../edit',profileId]\">Edit Profile</a>\r\n            <p>{{profile.bio}}</p>\r\n        </div>\r\n        <div class=\"col-md-4 col-xs-12 order-1 order-lg-2\" >\r\n            <img src={{profile.imagePath}} class=\"img-fluid w-50 rounded-circle mb-3\">        \r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div class=\"container py-5\">\r\n    <h2  *ngIf = \"profile\" class=\"font-weight-light text-black\">{{profile.username}}'s Posts</h2>\r\n    <hr>\r\n    <div class=\"row\">\r\n       \r\n    <div *ngIf=\"isloading\" style=\"text-align: center;\" class=\"loading-text\">\r\n        <app-spinner></app-spinner>\r\n     </div>\r\n  \r\n     <div class=\"col-lg-12\">\r\n       <ng-container *ngIf=\"posts.length>0\">\r\n        <div class=\"d-block d-md-flex podcast-entry bg-white mb-5 aos-init aos-animate\"\r\n        *ngFor=\"let post of posts\" data-aos=\"fade-up\">\r\n        <div class=\"image\" [style.backgroundImage]=\"'url('+ post.imagePath +') ' \"></div>\r\n      <div class=\"text\">\r\n        <h3 class=\"font-weight-light\">\r\n          <a *ngIf=\"userId===post.creator\"  [routerLink]=\"['../../myposts',post.id]\"> {{ post.title }}</a>\r\n          <a *ngIf=\"userId!==post.creator\"  [routerLink]=\"['posts',post.id]\"> {{ post.title }}</a>\r\n        </h3>\r\n        <div class=\"text-white mb-3\">\r\n          <span class=\"text-black-opacity-05\">\r\n            <small>By Mike Smith <span class=\"sep\">/</span>{{post.postDate | date:'short'}}</small>\r\n          </span>\r\n        </div>\r\n\r\n        <div class=\"desc\">\r\n          <p>{{post.content |slice:0: 170 }}{{post.content.length > 170 ? ' ...Read More' : ''}}</p>\r\n        </div>\r\n      </div>\r\n      </div>\r\n    </ng-container>\r\n    <div *ngIf=\"posts.length==0 && !isloading\" style=\"text-align: center;\" class=\"loading-text\">\r\n      <h2 class=\"nopost\">No Posts written by this user</h2>\r\n   </div>\r\n      </div>\r\n</div>\r\n</div>\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { Post } from '../posts/post.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport {environment} from '../../environments/environment'\r\nconst BACKEND_URL = environment.apiUrl + \"/posts\"\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PostService {\r\n  private posts: Post[] = [];\r\n \r\n  private postsUpdated = new Subject<Post[]>();\r\n  public err = new BehaviorSubject<any>(null);\r\n  constructor(\r\n    private http: HttpClient, private router: Router\r\n  ) { }\r\n\r\n  getPostUpdateListener() {\r\n    return this.postsUpdated.asObservable();\r\n  }\r\n\r\n  addPost(title: string, content: string, imgpath: File, postDate: Date) {\r\n    const postData = new FormData();\r\n    postData.append(\"title\", title);\r\n    postData.append(\"content\", content);\r\n    postData.append(\"image\", imgpath, title);\r\n    postData.append(\"postDate\", postDate.toString());\r\n    this.http\r\n      .post<{ message: string; post: Post }>(\r\n        BACKEND_URL,\r\n        postData\r\n      )\r\n      .subscribe(responseData => {\r\n        this.err.next(null)\r\n        this.router.navigate([\"/\"]);\r\n\r\n\r\n      }),\r\n      err => {\r\n        this.err.next(err)\r\n      }\r\n  }\r\n\r\n  getPosts() {\r\n    this.http.get<{ message: string; posts: any }>(BACKEND_URL)\r\n      .pipe(\r\n        map(postData => {\r\n          return postData.posts.map(post => {\r\n            return {\r\n              title: post.title,\r\n              content: post.content,\r\n              id: post._id,\r\n              imagePath: post.imagePath,\r\n              creator: post.creator,\r\n              postDate: post.postDate\r\n            };\r\n          });\r\n        })\r\n      )\r\n      .subscribe(transformedPosts => {\r\n        this.err.next(null)\r\n\r\n        this.posts = transformedPosts;\r\n        this.postsUpdated.next([...this.posts]);\r\n      },\r\n        err => {\r\n          this.err.next(err)\r\n        });\r\n  }\r\n\r\n  getPost(id: string) {\r\n    return this.http.get<{\r\n      _id: string, title: string, content: string, imagePath: string,\r\n      creator: string,postDate:Date;\r\n    }>(\r\n      BACKEND_URL +\"/\" + id\r\n    );\r\n  }\r\n\r\n  getMyPost(id: string) {\r\n    this.http.get<{ message: string; posts: any }>(\r\n      BACKEND_URL + \"/mypost\"\r\n    ).pipe(\r\n      map(postData => {\r\n        return postData.posts.map(post => {\r\n          return {\r\n            title: post.title,\r\n            content: post.content,\r\n            id: post._id,\r\n            imagePath: post.imagePath,\r\n            creator: post.creator,\r\n            postDate: post.postDate\r\n          };\r\n        });\r\n      })\r\n    )\r\n      .subscribe(transformedPosts => {\r\n        this.err.next(null)\r\n\r\n        this.posts = transformedPosts;\r\n        this.postsUpdated.next([...this.posts]);\r\n      },\r\n        err => {\r\n          this.err.next(err)\r\n        });\r\n  }\r\n\r\n\r\n  updatePost(id: string, title: string, content: string, image: File | string) {\r\n    let postData: Post | FormData;\r\n    if (typeof image === \"object\") {\r\n      postData = new FormData();\r\n      postData.append(\"id\", id);\r\n      postData.append(\"title\", title);\r\n      postData.append(\"content\", content);\r\n      postData.append(\"image\", image, title);\r\n    } else {\r\n      postData = {\r\n        id: id,\r\n        title: title,\r\n        content: content,\r\n        imagePath: image,\r\n        creator: null\r\n      };\r\n    }\r\n    this.http\r\n      .put(BACKEND_URL + \"/\" +id, postData)\r\n      .subscribe(response => {\r\n        this.err.next(null)\r\n        this.router.navigate([\"/myposts\"]);\r\n      },\r\n        err => {\r\n          this.err.next(err)\r\n        });\r\n  }\r\n\r\n  deletePost(postId: string) {\r\n    this.http\r\n      .delete(BACKEND_URL +\"/\"+ postId)\r\n      .subscribe((data) => {\r\n\r\n        this.err.next(null)\r\n        const updatedPosts = this.posts.filter(post => post.id !== postId);\r\n        this.posts = updatedPosts;\r\n        this.postsUpdated.next([...this.posts]);\r\n        this.router.navigate([\"/\"]);\r\n\r\n\r\n      },\r\n        e => {\r\n          this.err.next(e)\r\n\r\n        });\r\n\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { Profile } from '../profile/profile.model';\r\nimport {environment} from '../../environments/environment'\r\nconst BACKEND_URL = environment.apiUrl + \"/profile\"\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProfileService {\r\n\r\n  private profile: Profile;\r\n  private isProfileSet: boolean = false\r\n  private updatedProfile = new Subject<Profile>();\r\n  public err = new BehaviorSubject<any>(null);\r\n  constructor(\r\n    private http: HttpClient, private router: Router\r\n  ) { }\r\n\r\n  getProfileUpdateListener() {\r\n    return this.updatedProfile.asObservable();\r\n  }\r\n\r\n  getIsProfile() {\r\n    return this.profile;\r\n  }\r\n\r\n\r\n  getIsProfileSet() {\r\n    return this.isProfileSet\r\n  }\r\n\r\n\r\n  addProfile(title: string, content: string, imgpath: File) {\r\n    const postData = new FormData();\r\n    postData.append(\"username\", title);\r\n    postData.append(\"bio\", content);\r\n    postData.append(\"image\", imgpath, title);\r\n\r\n    this.http\r\n      .post<{ message: string; post: Profile }>(\r\n        BACKEND_URL +\"/create\",\r\n        postData\r\n      )\r\n      .subscribe(responseData => {\r\n        this.router.navigate(['/'])\r\n        this.err.next(null)\r\n\r\n      },\r\n        err => {\r\n          this.err.next(err)\r\n\r\n        })\r\n\r\n  }\r\n\r\n  updateProfile(id: string, username: string, bio: string, image: File | string) {\r\n    let profileData: Profile | FormData;\r\n    if (typeof image === \"object\") {\r\n      profileData = new FormData();\r\n      profileData.append(\"id\", id);\r\n      profileData.append(\"username\", username);\r\n      profileData.append(\"bio\", bio);\r\n      profileData.append(\"image\", image, username);\r\n    } else {\r\n      profileData = {\r\n        id: id,\r\n        username: username,\r\n        bio: bio,\r\n        imagePath: image,\r\n        creator: null\r\n      };\r\n    }\r\n\r\n    this.http\r\n      .put(BACKEND_URL+\"/edit/\" + id, profileData)\r\n      .subscribe(response => {\r\n\r\n        this.err.next(null)\r\n        this.router.navigate([\"/profile\"]);\r\n      },\r\n        err => {\r\n          console.log(err)\r\n          this.err.next(err)\r\n        });\r\n\r\n  }\r\n\r\n  getProfile() {\r\n\r\n    this.http.get<{ profile: any, message: string }>\r\n    (BACKEND_URL + \"/viewprofile\")\r\n      .subscribe(profile => {\r\n\r\n        let prof = profile.profile\r\n        this.profile = prof\r\n        this.isProfileSet = true\r\n        this.updatedProfile.next(profile.profile)\r\n        this.saveProfileData(profile.profile)\r\n      },\r\n        err => {\r\n        })\r\n\r\n  }\r\n\r\n  getProfileByCreatorId() {\r\n    return this.http.get<{ profile: any, message: string }>\r\n    (BACKEND_URL+\"/viewprofile\")\r\n  }\r\n\r\n  getPostUserByCreatorId(creatorId) {\r\n    return this.http.get<{ profile: any, message: string }>\r\n    (BACKEND_URL+\"/bycreator/\" + creatorId)\r\n  }\r\n\r\n  getAllUsers() {\r\n    return this.http.get<{ profile: any, message: string }>\r\n      (BACKEND_URL+\"/profiles\")\r\n  }\r\n\r\n  getProfileByUsername(uname: string) {\r\n    return this.http.get<{ profile: any, message: string }>\r\n      (BACKEND_URL +\"/\"+ uname)\r\n  }\r\n\r\n  getMyPost(uname: string) {\r\n    return this.http.get<{ post: any, message: string }>\r\n      (BACKEND_URL +\"/\"+ uname + \"/mypost\")\r\n\r\n  }\r\n\r\n  saveProfileData(profile) {\r\n    localStorage.setItem(\"profile\", profile)\r\n    localStorage.setItem(\"uname\", profile.username)\r\n  }\r\n\r\n  autogetProfile() {\r\n    const profile = localStorage.getItem(\"profile\")\r\n    if (profile) {\r\n      this.isProfileSet = true\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-spinner',\r\n  templateUrl: './spinner.component.html',\r\n  styleUrls: ['./spinner.component.css']\r\n})\r\nexport class SpinnerComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"text-center spinner\">\r\n    <div class=\"spinner-border\" role=\"status\">\r\n      <span class=\"sr-only\">Loading...</span>\r\n      \r\n    </div>\r\n    <h4> Please Wait ...</h4>\r\n  </div>","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n\r\n  apiUrl:\"https://abhivaadan.herokuapp.com/api\"\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}